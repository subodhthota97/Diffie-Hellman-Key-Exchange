#!/usr/bin/env python3
import socket
import sys
import struct

from Crypto.Cipher import AES
from Crypto.Protocol.KDF import PBKDF2
from Crypto.Util.Padding import pad, unpad
from Crypto.Random import get_random_bytes
from Crypto.Util.number import bytes_to_long, long_to_bytes
from Crypto.Hash import SHA256


def dh_key_exchange(sock, p, g):
    # Generate private key on both client and server
    
    private_key = get_random_bytes(32)
    private_key = bytes_to_long(private_key)
    
    # Calculate public key
    public_key = pow(g, private_key, p)
    public_key = str(public_key).encode('utf-8')
    public_key = public_key.rjust(384, b'0')
    
    # Send public key to other party
    sock.sendall(public_key)
    
    # Receive other party's public key
    other_public_key = sock.recv(384)
    other_public_key = int(other_public_key)
    
    # Calculate shared secret
    shared_secret = pow(other_public_key, private_key, p)
    shared_secret = long_to_bytes(shared_secret)
    # shared_secret = shared_secret.hex()
    
    # Hash shared secret to generate session key
    session_key = SHA256.new(shared_secret)
    session_key = session_key.digest()[:32]
    
    return session_key

def encryption(key, data, nonce):
    cipher = AES.new(key, AES.MODE_GCM, nonce)
    ciphertext, tag = cipher.encrypt_and_digest(pad(data, 16))
    return (nonce + tag + ciphertext)

def decryption(key, data, conn):
    try:
        nonce, tag, ciphertext = data[:16], data[16:32], data[32:]
        cipher = AES.new(key, AES.MODE_GCM, nonce)
        plaintext = unpad(cipher.decrypt_and_verify(ciphertext, tag), 16)
        return plaintext
    except ValueError as e:
        sys.stderr.write('Error: integrity check failed.')
        conn.close()
        

def get_key(password):
    salt = get_random_bytes(16)
    key = PBKDF2(password, salt, 32)
    return (salt, key)

def get_key_server(salt, password):
    key = PBKDF2(password, salt, 32)
    return key

def start_server(port):
    # Create a TCP/IP socket
    server_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)

    # Bind the socket to a specific address and port
    server_address = ('', port)
    server_socket.bind(server_address)

    # Listen for incoming connections
    server_socket.listen(1)
    # print("Server is listening on port {}".format(port))

    # Wait for a connection
    client_conn, client_address = server_socket.accept()

    g=2
    p=0x00cc81ea8157352a9e9a318aac4e33ffba80fc8da3373fb44895109e4c3ff6cedcc55c02228fccbd551a504feb4346d2aef47053311ceaba95f6c540b967b9409e9f0502e598cfc71327c5a455e2e807bede1e0b7d23fbea054b951ca964eaecae7ba842ba1fc6818c453bf19eb9c5c86e723e69a210d4b72561cab97b3fb3060b
    key = dh_key_exchange(client_conn, p, g)


    res =b''
    while True:
        data_len = client_conn.recv(2)
        if not data_len:
            break
        data_len = struct.unpack('!H', data_len)[0]
        data = client_conn.recv(data_len)
        if not data:
            break
        plaintext = decryption(key, data, client_conn)
        if plaintext is not None:
            sys.stdout.buffer.write(plaintext)
        else:
            break

        


    # Clean up the connection
    client_conn.close()

def start_client(server_ip, port):
    # salt, key = get_key(password)
    # Create a TCP/IP socket
    client_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)

    # Connect the socket to the server's address and port
    server_address = (server_ip, port)
    client_socket.connect(server_address)
    print("Connected to {}:{}".format(server_ip, port))

    # Read the data from stdin
    data = sys.stdin.buffer.read()

    g=2
    p=0x00cc81ea8157352a9e9a318aac4e33ffba80fc8da3373fb44895109e4c3ff6cedcc55c02228fccbd551a504feb4346d2aef47053311ceaba95f6c540b967b9409e9f0502e598cfc71327c5a455e2e807bede1e0b7d23fbea054b951ca964eaecae7ba842ba1fc6818c453bf19eb9c5c86e723e69a210d4b72561cab97b3fb3060b

    key = dh_key_exchange(client_socket, p, g)
  

    nonce = get_random_bytes(16)

    chunk_size = 1024
    for i in range(0, len(data), chunk_size):
        chunk = data[i:i + chunk_size]
        ciphertext = encryption(key, chunk, nonce)
        data_len = struct.pack('!H', len(ciphertext))
        client_socket.sendall(data_len + ciphertext)

    # Clean up the connection
    client_socket.close()

if __name__ == '__main__':
    if len(sys.argv) == 3:
        if sys.argv[1] == '-l':
            port = int(sys.argv[2])
            start_server(port)
        else:
            server_ip = sys.argv[1]
            port = int(sys.argv[2])
            start_client(server_ip, port)
    else:
        print("Check command format")

