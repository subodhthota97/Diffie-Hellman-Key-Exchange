#!/usr/bin/env python3
import socket
import sys
import struct

from Crypto.Cipher import AES
from Crypto.Protocol.KDF import PBKDF2
from Crypto.Util.Padding import pad, unpad
from Crypto.Random import get_random_bytes

def encryption(key, data, nonce):
    cipher = AES.new(key, AES.MODE_GCM, nonce)
    ciphertext, tag = cipher.encrypt_and_digest(pad(data, 16))
    return (nonce + tag + ciphertext)

def decryption(key, data, conn):
    try:
        nonce, tag, ciphertext = data[:16], data[16:32], data[32:]
        cipher = AES.new(key, AES.MODE_GCM, nonce)
        plaintext = unpad(cipher.decrypt_and_verify(ciphertext, tag), 16)
        return plaintext
    except ValueError as e:
        sys.stderr.write('Error: integrity check failed.')
        conn.close()
        

def get_key(password):
    salt = get_random_bytes(16)
    key = PBKDF2(password, salt, 32)
    return (salt, key)

def get_key_server(salt, password):
    key = PBKDF2(password, salt, 32)
    return key

def start_server(port, password):
    # Create a TCP/IP socket
    server_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)

    # Bind the socket to a specific address and port
    server_address = ('', port)
    server_socket.bind(server_address)

    # Listen for incoming connections
    server_socket.listen(1)
    # print("Server is listening on port {}".format(port))

    # Wait for a connection
    client_conn, client_address = server_socket.accept()
    # print("Accepted connection from {}".format(client_address))

    # Receive the length of the data
    client_salt = client_conn.recv(16)
    key = get_key_server(client_salt, password)
 
   
    res =b''
    while True:
        data_len = client_conn.recv(2)
        if not data_len:
            break
        data_len = struct.unpack('!H', data_len)[0]
        data = client_conn.recv(data_len)
        if not data:
            break
        plaintext = decryption(key, data, client_conn)
        if plaintext is not None:
            sys.stdout.buffer.write(plaintext)
        else:
            break

        


    # Clean up the connection
    client_conn.close()

def start_client(server_ip, port, password):
    salt, key = get_key(password)
    # Create a TCP/IP socket
    client_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)

    # Connect the socket to the server's address and port
    server_address = (server_ip, port)
    client_socket.connect(server_address)
    print("Connected to {}:{}".format(server_ip, port))

    # Read the data from stdin
    data = sys.stdin.buffer.read()


    client_socket.sendall(salt)

    nonce = get_random_bytes(16)

    chunk_size = 1024
    for i in range(0, len(data), chunk_size):
        chunk = data[i:i + chunk_size]
        ciphertext = encryption(key, chunk, nonce)
        data_len = struct.pack('!H', len(ciphertext))
        client_socket.sendall(data_len + ciphertext)

    # Clean up the connection
    client_socket.close()

if __name__ == '__main__':
    if len(sys.argv) == 5:
        if sys.argv[3] == '-l':
            password = sys.argv[2]
            port = int(sys.argv[4])
            start_server(port, password)
        else:
            server_ip = sys.argv[3]
            password = sys.argv[2]
            port = int(sys.argv[4])
            start_client(server_ip, port, password)
    else:
        print("Check command format")

